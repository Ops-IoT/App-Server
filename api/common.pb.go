// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RXWindow int32

const (
	RXWindow_RX1 RXWindow = 0
	RXWindow_RX2 RXWindow = 1
)

var RXWindow_name = map[int32]string{
	0: "RX1",
	1: "RX2",
}
var RXWindow_value = map[string]int32{
	"RX1": 0,
	"RX2": 1,
}

func (x RXWindow) String() string {
	return proto.EnumName(RXWindow_name, int32(x))
}
func (RXWindow) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_common_0ccb55e5f0c871f0, []int{0}
}

type Modulation int32

const (
	// LoRa
	Modulation_LORA Modulation = 0
	// FSK
	Modulation_FSK Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (x Modulation) String() string {
	return proto.EnumName(Modulation_name, int32(x))
}
func (Modulation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_common_0ccb55e5f0c871f0, []int{1}
}

type DataRate struct {
	// The used modulation (LORA or FSK).
	Modulation string `protobuf:"bytes,1,opt,name=modulation" json:"modulation,omitempty"`
	// Bandwidth (in kHz).
	Bandwidth uint32 `protobuf:"varint,2,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Used spread-factor.
	SpreadFactor uint32 `protobuf:"varint,3,opt,name=spreadFactor" json:"spreadFactor,omitempty"`
	// Bitrate (used for FSK modulation).
	Bitrate              uint32   `protobuf:"varint,4,opt,name=bitrate" json:"bitrate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataRate) Reset()         { *m = DataRate{} }
func (m *DataRate) String() string { return proto.CompactTextString(m) }
func (*DataRate) ProtoMessage()    {}
func (*DataRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_0ccb55e5f0c871f0, []int{0}
}
func (m *DataRate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRate.Unmarshal(m, b)
}
func (m *DataRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRate.Marshal(b, m, deterministic)
}
func (dst *DataRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRate.Merge(dst, src)
}
func (m *DataRate) XXX_Size() int {
	return xxx_messageInfo_DataRate.Size(m)
}
func (m *DataRate) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRate.DiscardUnknown(m)
}

var xxx_messageInfo_DataRate proto.InternalMessageInfo

func (m *DataRate) GetModulation() string {
	if m != nil {
		return m.Modulation
	}
	return ""
}

func (m *DataRate) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *DataRate) GetSpreadFactor() uint32 {
	if m != nil {
		return m.SpreadFactor
	}
	return 0
}

func (m *DataRate) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

type UplinkTXInfo struct {
	// TX frequency (in Hz).
	Frequency uint32 `protobuf:"varint,1,opt,name=frequency" json:"frequency,omitempty"`
	// Data-rate.
	DataRate *DataRate `protobuf:"bytes,2,opt,name=dataRate" json:"dataRate,omitempty"`
	// Code rate.
	CodeRate             string   `protobuf:"bytes,3,opt,name=codeRate" json:"codeRate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UplinkTXInfo) Reset()         { *m = UplinkTXInfo{} }
func (m *UplinkTXInfo) String() string { return proto.CompactTextString(m) }
func (*UplinkTXInfo) ProtoMessage()    {}
func (*UplinkTXInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_0ccb55e5f0c871f0, []int{1}
}
func (m *UplinkTXInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UplinkTXInfo.Unmarshal(m, b)
}
func (m *UplinkTXInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UplinkTXInfo.Marshal(b, m, deterministic)
}
func (dst *UplinkTXInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkTXInfo.Merge(dst, src)
}
func (m *UplinkTXInfo) XXX_Size() int {
	return xxx_messageInfo_UplinkTXInfo.Size(m)
}
func (m *UplinkTXInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkTXInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkTXInfo proto.InternalMessageInfo

func (m *UplinkTXInfo) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *UplinkTXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (m *UplinkTXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

type UplinkRXInfo struct {
	// Gateway MAC.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// Time when the frame was received (if available).
	Time string `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	// Time when the frame was received as time since GPS epoch (if available).
	TimeSinceGPSEpoch string `protobuf:"bytes,3,opt,name=timeSinceGPSEpoch" json:"timeSinceGPSEpoch,omitempty"`
	// Gateway internal timestamp.
	Timestamp uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// RSSI.
	Rssi int32 `protobuf:"varint,5,opt,name=rssi" json:"rssi,omitempty"`
	// LoRa SNR.
	LoRaSNR float32 `protobuf:"fixed32,6,opt,name=loRaSNR" json:"loRaSNR,omitempty"`
	// The board identifier that received the uplink frame.
	Board uint32 `protobuf:"varint,7,opt,name=board" json:"board,omitempty"`
	// THe antenna identifier that received the uplink frame.
	Antenna              uint32   `protobuf:"varint,8,opt,name=antenna" json:"antenna,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UplinkRXInfo) Reset()         { *m = UplinkRXInfo{} }
func (m *UplinkRXInfo) String() string { return proto.CompactTextString(m) }
func (*UplinkRXInfo) ProtoMessage()    {}
func (*UplinkRXInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_0ccb55e5f0c871f0, []int{2}
}
func (m *UplinkRXInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UplinkRXInfo.Unmarshal(m, b)
}
func (m *UplinkRXInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UplinkRXInfo.Marshal(b, m, deterministic)
}
func (dst *UplinkRXInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkRXInfo.Merge(dst, src)
}
func (m *UplinkRXInfo) XXX_Size() int {
	return xxx_messageInfo_UplinkRXInfo.Size(m)
}
func (m *UplinkRXInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkRXInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkRXInfo proto.InternalMessageInfo

func (m *UplinkRXInfo) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *UplinkRXInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *UplinkRXInfo) GetTimeSinceGPSEpoch() string {
	if m != nil {
		return m.TimeSinceGPSEpoch
	}
	return ""
}

func (m *UplinkRXInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UplinkRXInfo) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *UplinkRXInfo) GetLoRaSNR() float32 {
	if m != nil {
		return m.LoRaSNR
	}
	return 0
}

func (m *UplinkRXInfo) GetBoard() uint32 {
	if m != nil {
		return m.Board
	}
	return 0
}

func (m *UplinkRXInfo) GetAntenna() uint32 {
	if m != nil {
		return m.Antenna
	}
	return 0
}

type UplinkFrameLog struct {
	// TX information of the uplink.
	TxInfo *UplinkTXInfo `protobuf:"bytes,1,opt,name=txInfo" json:"txInfo,omitempty"`
	// RX information of the uplink.
	RxInfo []*UplinkRXInfo `protobuf:"bytes,2,rep,name=rxInfo" json:"rxInfo,omitempty"`
	// LoRaWAN PHYPayload.
	PhyPayloadJSON       string   `protobuf:"bytes,3,opt,name=phyPayloadJSON" json:"phyPayloadJSON,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UplinkFrameLog) Reset()         { *m = UplinkFrameLog{} }
func (m *UplinkFrameLog) String() string { return proto.CompactTextString(m) }
func (*UplinkFrameLog) ProtoMessage()    {}
func (*UplinkFrameLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_0ccb55e5f0c871f0, []int{3}
}
func (m *UplinkFrameLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UplinkFrameLog.Unmarshal(m, b)
}
func (m *UplinkFrameLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UplinkFrameLog.Marshal(b, m, deterministic)
}
func (dst *UplinkFrameLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkFrameLog.Merge(dst, src)
}
func (m *UplinkFrameLog) XXX_Size() int {
	return xxx_messageInfo_UplinkFrameLog.Size(m)
}
func (m *UplinkFrameLog) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkFrameLog.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkFrameLog proto.InternalMessageInfo

func (m *UplinkFrameLog) GetTxInfo() *UplinkTXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *UplinkFrameLog) GetRxInfo() []*UplinkRXInfo {
	if m != nil {
		return m.RxInfo
	}
	return nil
}

func (m *UplinkFrameLog) GetPhyPayloadJSON() string {
	if m != nil {
		return m.PhyPayloadJSON
	}
	return ""
}

type DownlinkTXInfo struct {
	// Gateway MAC.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// Frame must be sent immediately.
	Immediately bool `protobuf:"varint,2,opt,name=immediately" json:"immediately,omitempty"`
	// Transmit frame at the given time since GPS epoch.
	TimeSinceGPSEpoch string `protobuf:"bytes,3,opt,name=timeSinceGPSEpoch" json:"timeSinceGPSEpoch,omitempty"`
	// Transmit the frame at the given gateway internal timestamp.
	Timestamp uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// TX frequency (in Hz).
	Frequency uint32 `protobuf:"varint,5,opt,name=frequency" json:"frequency,omitempty"`
	// TX power (in dBm).
	Power int32 `protobuf:"varint,6,opt,name=power" json:"power,omitempty"`
	// Data-rate.
	DataRate *DataRate `protobuf:"bytes,7,opt,name=dataRate" json:"dataRate,omitempty"`
	// Code rate.
	CodeRate string `protobuf:"bytes,8,opt,name=codeRate" json:"codeRate,omitempty"`
	// Lora modulation polarization inversion.
	IPol bool `protobuf:"varint,9,opt,name=iPol" json:"iPol,omitempty"`
	// The board identifier that received the uplink frame.
	Board uint32 `protobuf:"varint,10,opt,name=board" json:"board,omitempty"`
	// THe antenna identifier that received the uplink frame.
	Antenna              uint32   `protobuf:"varint,11,opt,name=antenna" json:"antenna,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownlinkTXInfo) Reset()         { *m = DownlinkTXInfo{} }
func (m *DownlinkTXInfo) String() string { return proto.CompactTextString(m) }
func (*DownlinkTXInfo) ProtoMessage()    {}
func (*DownlinkTXInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_0ccb55e5f0c871f0, []int{4}
}
func (m *DownlinkTXInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownlinkTXInfo.Unmarshal(m, b)
}
func (m *DownlinkTXInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownlinkTXInfo.Marshal(b, m, deterministic)
}
func (dst *DownlinkTXInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkTXInfo.Merge(dst, src)
}
func (m *DownlinkTXInfo) XXX_Size() int {
	return xxx_messageInfo_DownlinkTXInfo.Size(m)
}
func (m *DownlinkTXInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkTXInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkTXInfo proto.InternalMessageInfo

func (m *DownlinkTXInfo) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *DownlinkTXInfo) GetImmediately() bool {
	if m != nil {
		return m.Immediately
	}
	return false
}

func (m *DownlinkTXInfo) GetTimeSinceGPSEpoch() string {
	if m != nil {
		return m.TimeSinceGPSEpoch
	}
	return ""
}

func (m *DownlinkTXInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DownlinkTXInfo) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *DownlinkTXInfo) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *DownlinkTXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (m *DownlinkTXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

func (m *DownlinkTXInfo) GetIPol() bool {
	if m != nil {
		return m.IPol
	}
	return false
}

func (m *DownlinkTXInfo) GetBoard() uint32 {
	if m != nil {
		return m.Board
	}
	return 0
}

func (m *DownlinkTXInfo) GetAntenna() uint32 {
	if m != nil {
		return m.Antenna
	}
	return 0
}

type DownlinkFrameLog struct {
	// TX information of the downlink.
	TxInfo *DownlinkTXInfo `protobuf:"bytes,1,opt,name=txInfo" json:"txInfo,omitempty"`
	// LoRaWAN PHYPayload.
	PhyPayloadJSON       string   `protobuf:"bytes,2,opt,name=phyPayloadJSON" json:"phyPayloadJSON,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownlinkFrameLog) Reset()         { *m = DownlinkFrameLog{} }
func (m *DownlinkFrameLog) String() string { return proto.CompactTextString(m) }
func (*DownlinkFrameLog) ProtoMessage()    {}
func (*DownlinkFrameLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_0ccb55e5f0c871f0, []int{5}
}
func (m *DownlinkFrameLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownlinkFrameLog.Unmarshal(m, b)
}
func (m *DownlinkFrameLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownlinkFrameLog.Marshal(b, m, deterministic)
}
func (dst *DownlinkFrameLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkFrameLog.Merge(dst, src)
}
func (m *DownlinkFrameLog) XXX_Size() int {
	return xxx_messageInfo_DownlinkFrameLog.Size(m)
}
func (m *DownlinkFrameLog) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkFrameLog.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkFrameLog proto.InternalMessageInfo

func (m *DownlinkFrameLog) GetTxInfo() *DownlinkTXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *DownlinkFrameLog) GetPhyPayloadJSON() string {
	if m != nil {
		return m.PhyPayloadJSON
	}
	return ""
}

func init() {
	proto.RegisterType((*DataRate)(nil), "api.DataRate")
	proto.RegisterType((*UplinkTXInfo)(nil), "api.UplinkTXInfo")
	proto.RegisterType((*UplinkRXInfo)(nil), "api.UplinkRXInfo")
	proto.RegisterType((*UplinkFrameLog)(nil), "api.UplinkFrameLog")
	proto.RegisterType((*DownlinkTXInfo)(nil), "api.DownlinkTXInfo")
	proto.RegisterType((*DownlinkFrameLog)(nil), "api.DownlinkFrameLog")
	proto.RegisterEnum("api.RXWindow", RXWindow_name, RXWindow_value)
	proto.RegisterEnum("api.Modulation", Modulation_name, Modulation_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_common_0ccb55e5f0c871f0) }

var fileDescriptor_common_0ccb55e5f0c871f0 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x25, 0x4d, 0xd3, 0xa6, 0xb7, 0x0f, 0x75, 0xcc, 0x2c, 0x22, 0x34, 0x82, 0x28, 0x0b, 0xd4,
	0x19, 0x50, 0x25, 0xca, 0x17, 0x20, 0x0d, 0x45, 0xc0, 0x30, 0x53, 0xb9, 0x20, 0xba, 0xbd, 0x4d,
	0x3c, 0x53, 0x8b, 0xc4, 0x0e, 0xa9, 0x47, 0xa5, 0x3f, 0xc0, 0x92, 0x5f, 0xe3, 0x0f, 0xf8, 0x16,
	0x64, 0x3b, 0x7d, 0xa4, 0x05, 0x89, 0x05, 0xab, 0xdc, 0x7b, 0x7c, 0x64, 0xdf, 0x73, 0xce, 0x55,
	0xa0, 0x13, 0xcb, 0x2c, 0x93, 0x62, 0x98, 0x17, 0x52, 0x49, 0xe2, 0x62, 0xce, 0xa3, 0xef, 0x0e,
	0xf8, 0x97, 0xa8, 0x90, 0xa2, 0x62, 0xe4, 0x31, 0x40, 0x26, 0x93, 0xfb, 0x14, 0x15, 0x97, 0x22,
	0x70, 0x42, 0x67, 0xd0, 0xa2, 0x7b, 0x08, 0x39, 0x83, 0xd6, 0x1c, 0x45, 0xb2, 0xe2, 0x89, 0x5a,
	0x04, 0xb5, 0xd0, 0x19, 0x74, 0xe9, 0x0e, 0x20, 0x11, 0x74, 0x96, 0x79, 0xc1, 0x30, 0x19, 0x63,
	0xac, 0x64, 0x11, 0xb8, 0x86, 0x50, 0xc1, 0x48, 0x00, 0xcd, 0x39, 0x57, 0x05, 0x2a, 0x16, 0xd4,
	0xcd, 0xf1, 0xa6, 0x8d, 0x96, 0xd0, 0xf9, 0x94, 0xa7, 0x5c, 0x7c, 0xf9, 0x38, 0x7b, 0x2b, 0x6e,
	0xa5, 0x7e, 0xeb, 0xb6, 0x60, 0x5f, 0xef, 0x99, 0x88, 0xd7, 0x66, 0x94, 0x2e, 0xdd, 0x01, 0xe4,
	0x1c, 0xfc, 0xa4, 0x9c, 0xda, 0x0c, 0xd2, 0x1e, 0x75, 0x87, 0x98, 0xf3, 0xe1, 0x46, 0x0a, 0xdd,
	0x1e, 0x93, 0x47, 0xe0, 0xc7, 0x32, 0x61, 0x86, 0xea, 0x1a, 0x49, 0xdb, 0x3e, 0xfa, 0xe5, 0x6c,
	0x5e, 0xa5, 0xf6, 0xd5, 0x3e, 0xb8, 0x19, 0xc6, 0xa5, 0x74, 0x5d, 0x12, 0x02, 0x75, 0xc5, 0x33,
	0xfb, 0x4a, 0x8b, 0x9a, 0x9a, 0x3c, 0x87, 0x13, 0xfd, 0x9d, 0x72, 0x11, 0xb3, 0x37, 0x93, 0xe9,
	0xeb, 0x5c, 0xc6, 0x8b, 0xf2, 0xee, 0xe3, 0x03, 0xad, 0x44, 0x83, 0x4b, 0x85, 0x59, 0x5e, 0xaa,
	0xde, 0x01, 0xfa, 0xfe, 0x62, 0xb9, 0xe4, 0x81, 0x17, 0x3a, 0x03, 0x8f, 0x9a, 0x5a, 0xbb, 0x94,
	0x4a, 0x8a, 0xd3, 0x6b, 0x1a, 0x34, 0x42, 0x67, 0x50, 0xa3, 0x9b, 0x96, 0x9c, 0x82, 0x37, 0x97,
	0x58, 0x24, 0x41, 0xd3, 0xdc, 0x63, 0x1b, 0xcd, 0x47, 0xa1, 0x98, 0x10, 0x18, 0xf8, 0xd6, 0xd5,
	0xb2, 0x8d, 0x7e, 0x38, 0xd0, 0xb3, 0x02, 0xc7, 0x05, 0x66, 0xec, 0x4a, 0xde, 0x91, 0x73, 0x68,
	0xa8, 0x6f, 0x5a, 0xac, 0x51, 0xd9, 0x1e, 0x9d, 0x18, 0xe3, 0xf6, 0xbd, 0xa7, 0x25, 0x41, 0x53,
	0x0b, 0x4b, 0xad, 0x85, 0xee, 0x01, 0x95, 0x96, 0x54, 0x4b, 0x20, 0x4f, 0xa1, 0x97, 0x2f, 0xd6,
	0x13, 0x5c, 0xa7, 0x12, 0x93, 0x77, 0xd3, 0x9b, 0xeb, 0xd2, 0x8f, 0x03, 0x34, 0xfa, 0x59, 0x83,
	0xde, 0xa5, 0x5c, 0x89, 0xbd, 0xa4, 0x8f, 0x3d, 0x0f, 0xa1, 0xcd, 0xb3, 0x8c, 0x25, 0x1c, 0x15,
	0x4b, 0xd7, 0xc6, 0x7a, 0x9f, 0xee, 0x43, 0xff, 0x35, 0x81, 0xca, 0xa6, 0x79, 0x87, 0x9b, 0x76,
	0x0a, 0x5e, 0x2e, 0x57, 0xac, 0x30, 0x49, 0x78, 0xd4, 0x36, 0x95, 0xfd, 0x6b, 0xfe, 0xfb, 0xfe,
	0xf9, 0xd5, 0xfd, 0xd3, 0xe1, 0xf3, 0x89, 0x4c, 0x83, 0x96, 0x51, 0x68, 0xea, 0x5d, 0xc4, 0xf0,
	0x97, 0x88, 0xdb, 0xd5, 0x88, 0xef, 0xa0, 0xbf, 0x31, 0x74, 0x9b, 0xf1, 0xb3, 0x83, 0x8c, 0x1f,
	0xda, 0xe1, 0x2a, 0xbe, 0x6f, 0x53, 0x3e, 0x8e, 0xae, 0xf6, 0xa7, 0xe8, 0x2e, 0xce, 0xc0, 0xa7,
	0xb3, 0xcf, 0x5c, 0x24, 0x72, 0x45, 0x9a, 0xe0, 0xd2, 0xd9, 0x8b, 0xfe, 0x03, 0x5b, 0x8c, 0xfa,
	0xce, 0xc5, 0x13, 0x80, 0x0f, 0xbb, 0x3f, 0x85, 0x0f, 0xf5, 0xab, 0x1b, 0xfa, 0xca, 0x12, 0xc6,
	0xd3, 0xf7, 0x7d, 0x67, 0xde, 0x30, 0x7f, 0x9d, 0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xca,
	0xc5, 0xed, 0xa6, 0x85, 0x04, 0x00, 0x00,
}
